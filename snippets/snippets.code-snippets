{
	"Pycerver main": {
		"prefix": "pymain",
		"body": [
			"import signal ",
			"import sys",
			"from service import version as v",
			"from service import ${1:api}, conf",
			"${2: from service import db as db}",
			"from cerver import *",
			"",
			"if __name__ == \"__main__\":",
			"    signal.signal(signal.SIGPIPE, signal.SIG_IGN)",
			"",
			"    cerver_initialize(conf.end)",
			"    v.${1:api}_version_print_full()",
			"    ${1:api}.${1:api}_config ()",
			"    ${3:db.${1.api}_mongo_init()}",
			"",
			"    conf.start()",

		],
		"description": "Creates complete configuration of main"
	},

	"Pycerver conf": {
		"prefix": "pyconf",
		"body": [
			"import os, signal, sys",
			"import ctypes",
			"from service.${1:api} import *",
			"",
			"import cerver",
			"",
			"${2:api_cerver} = None",
			"",
			"def end (signum, frame):",
			"    cerver.http_cerver_all_stats_print (cerver.http_cerver_get (${2:api_cerver}))",
			"    cerver.cerver_teardown (${2:api_cerver})",
			"    cerver.cerver_end ()",
			"    sys.exit (\"Done!\")",
			"",
			"def ${1:api}_set_routes (http_cerver):",
			"    ${3:#route_configuration}",
			"",
			"",
			"def start ():",
			"    global ${2:api_cerver}",
			"    api_cerver = cerver.cerver_main_http_configuration (PORT, CERVER_CONNECTION_QUEUE)",
			"",
			"    http_cerver = cerver.http_cerver_get (${2:api_cerver})",
			"",
			"    cerver.cerver_auth_http_configuration(http_cerver, cerver.JWT_ALG_RS256, PRIV_KEY, PUB_KEY)",
			"",
			"    ${1:api}_set_routes (http_cerver)",
			"",
			"    cerver.cerver_start(${2:api_cerver})",
			

		],
		"description": "Creates initial configuration",
	},

	"Pycerver api": {
		"prefix": "pyapi",
		"body": [
			"import os",
			"",
			"import cerver",
			"",
			"from service.runtime import * ",
			"from service.errors import ${1:api}_errors_init, ${1:api}_errors_end",
			"",
			"RUNTIME = runtime_from_string (os.environ.get(\"RUNTIME\"))",
			"",
			"PORT = int (os.environ.get(\"PORT\"))",
			"",
			"CERVER_RECEIVE_BUFFER_SIZE = int (os.environ.get(\"CERVER_RECEIVE_BUFFER_SIZE\"))",
			"CERVER_TH_THREADS = int (os.environ.get(\"CERVER_TH_THREADS\"))",
			"CERVER_CONNECTION_QUEUE = int (os.environ.get(\"CERVER_CONNECTION_QUEUE\"))",
			"",
			"PRIV_KEY = os.environ.get(\"PRIV_KEY\")",
			"PUB_KEY = os.environ.get(\"PUB_KEY\")",
			"",
			"def ${1:api}_config ():",
			"   print (\"RUNTIME: \", runtime_to_string (RUNTIME))",
			"",
			"   print (\"PORT: \", PORT)",
			"",
			"   print (\"CERVER_RECEIVE_BUFFER_SIZE: \", CERVER_RECEIVE_BUFFER_SIZE)",
			"   print (\"CERVER_TH_THREADS: \", CERVER_TH_THREADS)",
			"   print (\"CERVER_CONNECTION_QUEUE: \", CERVER_CONNECTION_QUEUE)",
			"",
			"",
			"   print (\"PRIV_KEY: \", PRIV_KEY)",
			"   print (\"PUB_KEY: \", PUB_KEY)",
			"",
			"   ${1:api}_errors_init ()",
			"",
			"def ${1:api}_end ():",
			"   ${1:api}_errors_end ()",
		],
		"description": "Api initial configuration"
	},

	"Pycerver errors": {
		"prefix": "pyerrors",
		"body": [
			"import cerver",
			"",
			"${1:API}_ERROR_NONE = 0",
			"${1:API}_ERROR_BAD_REQUEST = 1",
			"${1:API}_ERROR_MISSING_VALUES = 2",
			"${1:API}_ERROR_BAD_USER = 3",
			"${1:API}_ERROR_EXISTING_USER = 4",
			"${1:API}_ERROR_SERVER_ERROR = 5",
			"",
			"bad_request_error = None",
			"bad_user_error = None",
			"missing_values = None",
			"existing_user_error = None",
			"server_error = None",
			"",
			"def ${2:api}_errors_init ():",
			"   global bad_request_error",
			"   global bad_user_error",
			"   global missing_values",
			"   global existing_user_error",
			"   global server_error",
			"",
			"   bad_request_error = cerver.http_response_json_key_value (",
			"   cerver.HTTP_STATUS_BAD_REQUEST,",
			"       \"error\".encode (\"utf-8\"),",
			"       \"Bad request!\".encode (\"utf-8\")",
			"   )",
			"",
			"   bad_user_error = cerver.http_response_json_key_value (",
			"   cerver.HTTP_STATUS_BAD_REQUEST,",
			"       \"error\".encode (\"utf-8\"),",
			"       \"Bad user!\".encode (\"utf-8\")",
			"   )",
			"",
			"   missing_values = cerver.http_response_json_key_value (",
			"   cerver.HTTP_STATUS_BAD_REQUEST,",
			"       \"error\".encode (\"utf-8\"),",
			"       \"Missing values!\".encode (\"utf-8\")",
			"   )",
			"",
			"   existing_user_error = cerver.http_response_json_key_value (",
			"   cerver.HTTP_STATUS_BAD_REQUEST,",
			"       \"error\".encode (\"utf-8\"),",
			"       \"User already exists!\".encode (\"utf-8\")",
			"   )",
			"",
			"   server_error = cerver.http_response_json_key_value (",
			"   cerver.HTTP_STATUS_INTERNAL_SERVER_ERROR,",
			"       \"error\".encode (\"utf-8\"),",
			"       \"Server error!\".encode (\"utf-8\")",
			"   )",
			"",
			"def ${2:api}_error_send_response (${2:api}_error, http_receive):",
			"   if (${2:api}_error == ${1:API}_ERROR_NONE):",
			"       pass",
			"",
			"   if (${2:api}_error == ${1:API}_ERROR_BAD_REQUEST):",
			"       cerver.http_response_send (bad_request_error, http_receive)",
			"",
			"   if (${2:api}_error == ${1:API}_ERROR_MISSING_VALUES):",
			"       cerver.http_response_send (missing_values, http_receive)",
			"",
			"   if (${2:api}_error == ${1:API}_ERROR_BAD_USER):",
			"       cerver.http_response_send (bad_user_error, http_receive)",
			"",
			"   if (${2:api}_error == ${1:API}_ERROR_EXISTING_USER):",
			"       cerver.http_response_send (existing_user_error, http_receive)",
			"",
			"   if (${2:api}_error == ${1:API}_ERROR_SERVER_ERROR):",
			"       cerver.http_response_send (server_error, http_receive)",
			"",
			"def ${2:api}_errors_end ():",
			"   global bad_request_error",
			"   global bad_user_error",
			"   global missing_values",
			"   global existing_user_error",
			"   global server_error",
			"",
			"   cerver.http_response_delete (bad_request_error)",
			"   cerver.http_response_delete (bad_user_error)",
			"   cerver.http_response_delete (missing_values)",
			"   cerver.http_response_delete (existing_user_error)",
			"   cerver.http_response_delete (server_error)",
		],
		"description": "Errors initial configuration"
	},

	"Pycerver Runtime": {
		"prefix": "pyruntime",
		"body": [
			"import os",
			"",
			"RUNTIME_TYPE_NONE  = 0",
			"RUNTIME_TYPE_DEVELOPMENT   = 1",
			"RUNTIME_TYPE_TEST  = 2",
			"RUNTIME_TYPE_PRODUCTION    = 3",
			"",
			"def runtime_to_string (runtype):",
			"   if (RUNTIME_TYPE_DEVELOPMENT == runtype):",
			"   return \"Development\"",
			"   if (RUNTIME_TYPE_TEST == runtype):",
			"   return \"Test\"",
			"   if (RUNTIME_TYPE_PRODUCTION == runtype):",
			"   return \"Production\"",
			"   ",
			"   return \"None\"",
			"",
			"def runtime_from_string (value):",
			"   if (\"development\" == value):",
			"   return RUNTIME_TYPE_DEVELOPMENT",
			"   if (\"test\" == value):",
			"   return RUNTIME_TYPE_TEST",
			"   if (\"production\" == value):",
			"   return RUNTIME_TYPE_PRODUCTION",
			"   ",
			"   return RUNTIME_TYPE_NONE",
		],
		"description": "Runtime initial configuration"
	},

	"Pycerver Version": {
		"prefix": "pyversion",
		"body": [
			"import cerver.utils",
			"",
			"${1:API}_VERSION = \"${2:0.1}\"",
			"${1:API}_VERSION_NAME = \"Version ${2:0.1}\"",
			"${1:API}_VERSION_DATE = \"${4:CURRENT_DATE/CURRENT_MONTH/CURRENT_YEAR}\"",
			"${1:API}_VERSION_TIME = \"${5:CURRENT_HOUR CST}\"",
			"${1:API}_VERSION_AUTHOR = \"${6:Author}\"",
			"",
			"def api_version_print_full ():",
			"   cerver.utils.cerver_log_both (",
			"   cerver.utils.LOG_TYPE_NONE, cerver.utils.LOG_TYPE_NONE,",
			"   \"${7:Api} PyCerver Version: %s\".encode ('utf-8'), ${1:API}_VERSION_NAME.encode ('utf-8')",
			"   )",
			"",
			"   cerver.utils.cerver_log_both (",
			"   cerver.utils.LOG_TYPE_NONE, cerver.utils.LOG_TYPE_NONE,",
			"   \"Release Date & time: %s - %s\".encode ('utf-8'),",
			"   ${1:API}_VERSION_DATE.encode ('utf-8'), ${1:API}_VERSION_TIME.encode ('utf-8')",
			"   )",
			"",
			"   cerver.utils.cerver_log_both (",
			"   cerver.utils.LOG_TYPE_NONE, cerver.utils.LOG_TYPE_NONE,",
			"   \"Author: %s\\n\".encode ('utf-8'),",
			"   ${1:API}_VERSION_AUTHOR.encode ('utf-8')",
			"   )",
			"",
			"def api_version_print_version_id ():",
			"   cerver.utils.cerver_log_both (",
			"   cerver.utils.LOG_TYPE_NONE, cerver.utils.LOG_TYPE_NONE,",
			"   \"\\n${7:Api} PyCerver Version ID: %s\\n\".encode ('utf-8'),",
			"   ${1:API}_VERSION.encode ('utf-8')",
			"   )",
			"",
			"def api_version_print_version_name ():",
			"   cerver.utils.cerver_log_both (",
			"   cerver.utils.LOG_TYPE_NONE, cerver.utils.LOG_TYPE_NONE,",
			"   \"\\n${7:Api} PyCerver Version: %s\\n\".encode ('utf-8'),",
			"   ${1:API}_VERSION_NAME.encode ('utf-8')",
			"   )",
		],
		"description": "Intial version configuration"
	},

	"Pycerver database": {
		"prefix": "pydb",
		"body": [
			"import os",
			"from pymongo import MongoClient",
			"",
			"import cerver.utils ",
			"import service.${1:api} as ${1:api}",
			"",
			"from pymongoose.methods import set_schemas",
			"",
			"## Models",
			"",
			"",
			"${2:db} = None",
			"",
			"def reports_mongo_init():",
			"    global ${2:db}",
			"    client = MongoClient(reports.MONGO_URI)",
			"    try:",
			"        ${2:db} = client.${3:database}",
			"",
			"        cerver.utils.cerver_log_success(",
			"            \"MongoDB Connected!\".encode(\"utf-8\")",
			"        )",
			"        # Include models",
			"",
			"        schemas = {}",
			"",
			"        set_schemas(schemas)",
			"    except:",
			"        cerver.utils.cerver_log_error(",
			"            \"Error connecting to MongoDB\".encode(\"utf-8\")",
			"        )",
		]
	},

	"Pycerver Route imports": {
		"prefix": "pyimport",
		"body": [
			"import ctypes",
			"import json",
			"import random",
			"import re",
			"from cerver import *",
			"from cerver.http import *",
			"from cerver.headers import *",
			"",
			"from service.errors import *",
			"from service import runtime, ${1:api}",
			"from service.controllers.${model}s import *",
			"from service.utils.body_validator import *",
		],
		"description": "Import all required modules for a route"
	},

	"Pycerver Route": {
		"prefix": "pyr",
		"body": [
			"#${1:method} /${2:route}",
			"@ctypes.CFUNCTYPE(None, ctypes.c_void_p, ctypes.c_void_p)",
			"def ${3:route_name}_handler (http_receive, request):",
			"    try:",
			"        $6",
			"    except:",
			"        $4_error_send_response($5_ERROR_SERVER_ERROR, http_receive)",
		]
	},

	"Pycerver Route Ref": {
		"prefix": "pyref",
		"body": [
			"#${1:METHOD} ${2:main_route}/${3:route}",
			"${7:cerver.}${4|http_create_secure_route,http_create_route|}(${7:cerver.}REQUEST_METHOD_${1:METHOD}, \"${3:route}\", ${5:handler}, ${6|main_route,http_cerver=http_cerver|})",
		]
	},

	"Pycerver Model":{
		"prefix": "pymodel",
		"body": [
			"import datetime",
			"from pymongoose import methods",
			"from pymongoose.mongo_types import Types, Schema, MongoException, MongoError",
			"from bson import json_util",
			"from bson.objectid import ObjectId",
			"",
			"class ${2:Model}(Schema):",
			"   schema_name = \"$3\"",
			"",
			"   def __init__(self, **kwargs):",
			"       self.schema = {$4}",
			"",
			"       super().__init__(self.schema_name, self.schema, kwargs)",
			"",
			"   def __str__(self):",
			"       return f\"$5\"",
		]
	},

	"Pycerver post body": {
		"prefix": "pybody",
		"body": "${1:body} = ${2:cerver.}http_request_get_body_json(request)",
	},

	"Pycerver params": {
		"prefix": "pyparams",
		"body": [
			"${1:param_values} = ${3:cerver.}http_request_get_query_params(request)",
			"${2:value} = ${3:cerver.}http_request_get_query_value(${1:param_values}, \"${2:value}\")"
		]
	},

	"Pycerver path variables": {
		"prefix": "pypath",
		"body": [
			"${1:id} = None",
			"try:",
			"   params = http_get_params_list(request)",
			"   ${1:id} = params[0]",
			"   if ${1:id} is None: raise KeyError(\"Param was not found\")",
			"except:",
			"   return $2_error_send_response($3_ERROR_MISSING_VALUES, http_receive)"
		]
	}
	

}